local modules = {}
for _, v in ipairs(getgc(true)) do
    if typeof(v) == "function" and islclosure(v) then
        local src = debug.info(v, "s")
        local name = debug.info(v, "n")
        if src:find(".BowSpecial") and name == "update" then
            modules.Character = debug.getupvalue(v, 13)
            modules.Camera = debug.getupvalue(v, 15)
            modules.Network = debug.getupvalue(v, 19)
        elseif src:find(".Character") and name == "getGroundCastResult" then
            modules.FPS = debug.getupvalue(v, 2)
            modules.FPS2 = debug.getupvalue(v, 3)
        elseif src:find(".Character") and name == "updateCharacter" then
            modules.Player  = debug.getupvalue(v, 4)
            modules.Player2 = debug.getupvalue(v, 6)
            modules.Player3 = debug.getupvalue(v, 14)
            modules.Player4 = debug.getupvalue(v, 15)
            modules.Player5 = debug.getupvalue(v, 21)
            modules.Player6 = debug.getupvalue(v, 28)
            modules.Player7 = debug.getupvalue(v, 32)
        end
    end
end
--
local OsClock = os.clock()
local drawing = getgenv().Drawing
local workspace,camera = cloneref(game:GetService("Workspace")),workspace.CurrentCamera
local UIS, RS, ReplicatedStorage = cloneref(game:GetService("UserInputService")), cloneref(game:GetService("RunService")), cloneref(game:GetService("ReplicatedStorage"))


local DrRayLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/AZYsGithub/DrRay-UI-Library/main/DrRay.lua"))()
local window = DrRayLibrary:Load("Ez bans.exe", "Default")
--
local tab = DrRayLibrary.newTab("Combat", "ImageIdHere")
-- Silent aim
tab.newButton("silent aim", "", function()
local modules = {
    ["Camera"] = {},
    ["Player"] = {},
    ["Character"] = {},
    ["Inventory"] = {},
    ["RangedWeapon"] = {},
    ["BowSpecial"] = {},
    ["FPS"] = {},
    ["NetWork"] = {},
    ["ClimbingPick"] = {},
    ["BuildingTool"] = {},
    ["Consumable"] = {},
    ["Melee"] = {},
    ["MiningDrill"] = {},
    ["PlaceEntity"] = {},
    ["PortableAnvil"] = {},
    ["PortableWorkbench"] = {},
    ["InputManager"] = {},
    ["Particle"] = {},
    ["Settings"] = {},
    ["Sound"] = {},
    ["UI"] = {},
}
--
for _, v in pairs(getgc(true)) do
    if typeof(v) == "function" and islclosure(v) then
        local info = debug.getinfo(v)
        local name = string.match(info.short_src, "%.([%w_]+)$")
        if name and modules[name] and info.name ~= nil then
            modules[name][info.name] = info.func
        end
    end
end
--
local workspace = cloneref(game:GetService("Workspace"))
local camera = workspace.CurrentCamera
local UIS = cloneref(game:GetService("UserInputService"))
local RS = cloneref(game:GetService("RunService"))
local ReplicatedStorage = cloneref(game:GetService("ReplicatedStorage"))
--
local Fov = Drawing.new("Circle")
local Sline = Drawing.new("Line")
local screenSize = camera.ViewportSize
local screenCenter = Vector2.new(screenSize.X / 2, screenSize.Y / 2)
Fov.Position = screenCenter
Fov.Radius = 150
Fov.Color = Color3.fromRGB(255, 0, 255)
Fov.Visible = true
Sline.Color = Color3.fromRGB(255, 255, 255)
Sline.Thickness = 1
Sline.Visible = true
Sline.ZIndex = 1
--
local getclosest = function()
    local closestModel, closestData = nil, nil
    local closestMagnitude = math.huge
    local camera = workspace.CurrentCamera
--
    for _, v in pairs(debug.getupvalue(modules.Player.GetPlayerModel, 1) or {}) do
        if v.model:FindFirstChild("Head") and not v.sleeping then
            local pos, onScreen = camera:WorldToViewportPoint(v.model:GetPivot().Position)
            if onScreen then
                local magnitude = (Vector2.new(pos.X, pos.Y) - screenCenter).Magnitude
                local playerDistance = (workspace.Ignore.LocalCharacter.Middle:GetPivot().Position - v.model:GetPivot().Position).Magnitude
--
                if magnitude < Fov.Radius and playerDistance <= 9999 and magnitude < closestMagnitude then
                    closestMagnitude = magnitude
                    closestModel = v.model
                    closestData = v
                end
            end
        end
    end
--
    return closestModel, closestData
end
--
game:GetService("RunService").RenderStepped:Connect(function()
    getgenv().SilentTarget = getclosest()
    if getgenv().SilentTarget and getgenv().SilentTarget:FindFirstChild("Head") then
        local head_pos = getgenv().SilentTarget.Head.Position
        local screenPos, onScreen = camera:WorldToViewportPoint(head_pos)
--
        if onScreen then
            Sline.From = screenCenter
            Sline.To = Vector2.new(screenPos.X, screenPos.Y)
            Sline.Visible = true
        else
            Sline.Visible = false
        end
    else
        Sline.Visible = false
    end
end)
--
local hue, speed = 0, 0.7
RS.RenderStepped:Connect(function(dt)
    hue = (hue + (dt * speed * 100)) % 360
    Fov.Color = Color3.fromHSV(hue / 360, 1, 1)
end)
--
local function predict()
    local prediction = Vector3.new(0,0,0)
    local drop = Vector3.new(0,0,0)
    local player, playertable = getclosest()
    if player and playertable then
        local modules = getrenv()._G.modules
        if modules.FPS and modules.FPS.GetEquippedItem() and modules.FPS.GetEquippedItem().id then
            local ps = nil
            local pd = nil
            local weapon = modules.FPS.GetEquippedItem().id
            local itemconfigs = require(game:GetService("ReplicatedStorage").ItemConfigs[weapon])
            for i,v in pairs(itemconfigs) do
                if i == "ProjectileSpeed" or i == "ProjectileDrop" then
                   ps = itemconfigs.ProjectileSpeed
                   pd = itemconfigs.ProjectileDrop
                end
            end
            if ps and pd and weapon ~= nil then
                local velocity = playertable.velocityVector
                local distance = (workspace.Ignore.LocalCharacter.Middle.Position - player.Head.Position).Magnitude
--
                if weapon == "PumpShotgun" then pd = 0.1 end
                if ps == 0 then ps = 500 end
--
                local tth = distance / ps
                local mth = ps * tth * ps ^ 2
                tth = tth + (distance / mth)
--
                local dropresult = pd ^ (tth * pd) - 1
                prediction = (velocity * (distance / ps*9)) * .65
--
                drop = Vector3.new(0, math.max(0, dropresult), 0)
                prediction = prediction + drop
            end
        end
    end
    return prediction,drop
end
--
local SilentAim = true
local oldfromOrientation
oldfromOrientation = hookfunction(CFrame.fromOrientation, newcclosure(function(p, y, r)
    if SilentAim and getgenv().SilentTarget and debug.info(3, "n") == "fire" then
        local origin = modules.Camera.GetCFrame()
        local Camera = game.workspace.CurrentCamera
        local cameraPosition = Camera.CFrame.Position
        local predictedPos = getgenv().SilentTarget.Head.Position + predict()
--
        if predictedPos then
            return Camera.CFrame:Inverse() * CFrame.lookAt(cameraPosition, predictedPos)
        end
    end
--
    return oldfromOrientation(p, y, r)
end))
end)
tab.newToggle("Toggle hbe", "Toggle hbe (hitbox expander)", true, function(toggleState)
    Hitbox = toggleState 
end) 
tab.newSlider("hitbox size", "hitbox expander slider", 10, false, function(num)
    headsize = num
end)
--
local function modifyPlayerHeads()
    for i, v in next, game.Workspace:GetChildren() do
        if v:IsA("Model") and v:FindFirstChild("Head") then
            local head = v.Head
            if head then
                local success, _ = pcall(function()
                    head.Size = Vector3.new(headsize, headsize, headsize)
                    head.Transparency = 0.5
                    head.CanCollide = false 
                end)
                if not success then
                    warn("Failed to modify head for player:", v.Name)
                end
            end
        end
    end
end
--
game:GetService("RunService").RenderStepped:Connect(function()
    if Hitbox then
        modifyPlayerHeads()
    end
end)
local tab = DrRayLibrary.newTab("Visuals", "ImageIdHere")
-- Esp
tab.newButton("Esp", "", function()
wait(0.1)
repeat
    wait(0.1)
until game:IsLoaded()

wait(0.5)

local Cache = {}
local Cache2 = {}
local CornerBoxes = true
local WeaponType = true
local Names = true
local Bar = true
local MaxDistance = 1500
local PlayerList = debug.getupvalue(modules.Player3.GetPlayerModel, 1)
--
local playerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui") if playerGui:FindFirstChild("XDEDEADEDE") then playerGui.XDEDEADEDE:Destroy() end
--
local Beamed = { Varis = { RunService = game:GetService("RunService"), Camera = game:GetService("Workspace").CurrentCamera, Lighting = game:GetService("Lighting"), UserInput = game:GetService("UserInputService"), LogService = game:GetService("LogService"), }, }
--
local BeamVar = Beamed.Varis
local VisibilityState = {}
local BarValue = 100 
--
local function CreateClass(Class, Properties) local ClassInt = typeof(Class) == "string" and Instance.new(Class) or Class for Property, Value in next, Properties do ClassInt[Property] = Value end return ClassInt end
--
local XDEDEADEDE = CreateClass("ScreenGui", {Parent = playerGui, Name = "XDEDEADEDE"})
--
local function DupeCheck(name) local existingESP = XDEDEADEDE:FindFirstChild(name) if existingESP then existingESP:Destroy() end end
--
local function IsSleeping(model) if model and model:FindFirstChild("AnimationController") and model.AnimationController:FindFirstChild("Animator") then for _, v in pairs(model.AnimationController.Animator:GetPlayingAnimationTracks()) do if v.Animation.AnimationId == "rbxassetid://13280887764" then return true end end end return false end
--
local function Calc(d, maxDistance) return 4 - math.clamp(d / (maxDistance or 200), 0, 1) * 3 end
--
local function ESP(playertable) if not playertable then return end local model = playertable.model local humanoidRootPart = model:FindFirstChild("HumanoidRootPart") if not humanoidRootPart then return end
    --
    DupeCheck(model.Name)
    --
    local function CreateCornerBox(name, position, size, anchorPoint)
        return CreateClass("Frame", {Parent = XDEDEADEDE, Name = name, BackgroundColor3 = Color3.fromRGB(161,0,219), Position = position, Size = size, AnchorPoint = anchorPoint, Visible = CornerBoxes, ZIndex = 10})
    end
    --
    local function CreateBar(name, position, size)
        return CreateClass("Frame", {Parent = XDEDEADEDE, Name = name, BackgroundColor3 = Color3.fromRGB(255, 255, 255), Position = position, Size = size, Visible = Bar, ZIndex = 11})
    end
    --
    local function CreateBarBackRound(name, position, size)
        return CreateClass("Frame", {Parent = XDEDEADEDE, Name = name, BackgroundColor3 = Color3.fromRGB(0, 0, 0), Position = position, Size = size, Visible = Bar, ZIndex = 9})
    end
    --
    local LeftTop = CreateCornerBox("LeftTop", UDim2.new(0, 0, 0, 0), UDim2.new(0, 0, 0, 1), Vector2.new(0, 0))
    local LeftSide = CreateCornerBox("LeftSide", UDim2.new(0, 0, 0, 0), UDim2.new(0, 1, 0, 0), Vector2.new(0, 0))
    local RightTop = CreateCornerBox("RightTop", UDim2.new(0, 0, 0, 0), UDim2.new(0, 0, 0, 1), Vector2.new(0, 0))
    local RightSide = CreateCornerBox("RightSide", UDim2.new(0, 0, 0, 0), UDim2.new(0, 1, 0, 0), Vector2.new(0, 0))
    local BottomSide = CreateCornerBox("BottomSide", UDim2.new(0, 0, 0, 0), UDim2.new(0, 1, 0, 0), Vector2.new(0, 0))
    local BottomDown = CreateCornerBox("BottomDown", UDim2.new(0, 0, 0, 0), UDim2.new(0, 0, 0, 1), Vector2.new(0, 0))
    local BottomRightSide = CreateCornerBox("BottomRightSide", UDim2.new(0, 0, 0, 0), UDim2.new(0, 1, 0, 0), Vector2.new(0, 0))
    local BottomRightDown = CreateCornerBox("BottomRightDown", UDim2.new(0, 0, 0, 0), UDim2.new(0, 0, 0, 1), Vector2.new(0, 0))
    local NameTag = CreateClass("TextLabel", {Parent = XDEDEADEDE, Name = "NameTag", BackgroundTransparency = 1, Font = Enum.Font.Code, TextColor3 = Color3.fromRGB(161,0,219), TextStrokeTransparency = 0, TextSize = 11, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0), Position = UDim2.new(0.5, 0, 0, 0), Visible = Names})
    local WeaponText = CreateClass("TextLabel", { Parent = XDEDEADEDE, Name = "WeaponText", BackgroundTransparency = 1, Font = Enum.Font.Code, TextColor3 = Color3.fromRGB(161,0,219), TextStrokeTransparency = 0, TextSize = 11, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0), Position = UDim2.new(0.5, 0, 0, 20), Visible = WeaponType})
    local BarBackRound = CreateBarBackRound("BarBackRound", UDim2.new(0, 0, 0, 0), UDim2.new(0, 8, 0, 100))
    local Bar = CreateBar("Bar", UDim2.new(0, 0, 0, 0), UDim2.new(0, 0, 0, 0))
    local UIGradient = CreateClass("UIGradient", {Parent = Bar, Name = "UIGradient", Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(9, 255, 0)), ColorSequenceKeypoint.new(0.5, Color3.fromRGB(255, 238, 0)), ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 4))}), Rotation = 90})
    local Connection
    Connection = BeamVar.RunService.RenderStepped:Connect(function()
        if model and model.Parent and humanoidRootPart and humanoidRootPart.Parent then
            if IsSleeping(model) then
                LeftTop.Visible = false
                LeftSide.Visible = false
                BottomSide.Visible = false
                BottomDown.Visible = false
                RightTop.Visible = false
                RightSide.Visible = false
                BottomRightSide.Visible = false
                BottomRightDown.Visible = false
                NameTag.Visible = false
                WeaponText.Visible = false
                BarBackRound.Visible = false
                Bar.Visible = false
                return
            end
            --
            local Pos, OnScreen = BeamVar.Camera:WorldToScreenPoint(humanoidRootPart.Position)
            local Size = humanoidRootPart.Size.Y
            local distance = math.floor((BeamVar.Camera.CFrame.Position - humanoidRootPart.Position).magnitude)
            local scaleFactor = 12 / (Pos.Z * math.tan(math.rad(BeamVar.Camera.FieldOfView * 0.5)) * 2) * 100
            local w, h = 3 * scaleFactor, 4.5 * scaleFactor
            local HealthWidth = Calc(distance)
            local WeaponFound = playertable.equippedItem and playertable.equippedItem.id or "None"
            --
            if OnScreen then
                LeftTop.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                LeftTop.Size = UDim2.new(0, w / 5, 0, 1)

                LeftSide.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                LeftSide.Size = UDim2.new(0, 1, 0, h / 5)

                BottomSide.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y + h / 2 - h / 5)
                BottomSide.Size = UDim2.new(0, 1, 0, h / 5)

                BottomDown.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y + h / 2)
                BottomDown.Size = UDim2.new(0, w / 5, 0, 1)

                RightTop.Position = UDim2.new(0, Pos.X + w / 2 - w / 5, 0, Pos.Y - h / 2)
                RightTop.Size = UDim2.new(0, w / 5, 0, 1)

                RightSide.Position = UDim2.new(0, Pos.X + w / 2 - 1, 0, Pos.Y - h / 2)
                RightSide.Size = UDim2.new(0, 1, 0, h / 5)

                BottomRightSide.Position = UDim2.new(0, Pos.X + w / 2 - 1, 0, Pos.Y + h / 2 - h / 5)
                BottomRightSide.Size = UDim2.new(0, 1, 0, h / 5)

                BottomRightDown.Position = UDim2.new(0, Pos.X + w / 2 - w / 5, 0, Pos.Y + h / 2)
                BottomRightDown.Size = UDim2.new(0, w / 5, 0, 1)

                NameTag.Position = UDim2.new(0, Pos.X, 0, Pos.Y - h / 2 - 20)
                WeaponText.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 3)

                BarBackRound.Position = UDim2.new(0, Pos.X - w / 2 - 10, 0, Pos.Y - h / 2)
                BarBackRound.Size = UDim2.new(0, HealthWidth, 0, h)

                local barHeight = (BarValue / 100) * h
                Bar.Position = UDim2.new(0, Pos.X - w / 2 - 10, 0, Pos.Y + h / 2 - barHeight)
                Bar.Size = UDim2.new(0, HealthWidth, 0, barHeight)      
                
                local username = model:FindFirstChild("Head") and model.Head:FindFirstChild("Nametag") and model.Head.Nametag.tag.Text or "Player"
                NameTag.Text = (username or "Player") .. " [" .. distance .. "s]"

                WeaponText.Text = "[" .. (WeaponFound:upper() or "Hands") .. "]"

                local color = VisibilityState[model] and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(161, 0, 219)

                LeftTop.BackgroundColor3 = color
                LeftSide.BackgroundColor3 = color
                RightTop.BackgroundColor3 = color
                RightSide.BackgroundColor3 = color
                BottomSide.BackgroundColor3 = color
                BottomDown.BackgroundColor3 = color
                BottomRightSide.BackgroundColor3 = color
                BottomRightDown.BackgroundColor3 = color
                NameTag.TextColor3 = color
                WeaponText.TextColor3 = color

                LeftTop.Visible = CornerBoxes
                LeftSide.Visible = CornerBoxes
                RightTop.Visible = CornerBoxes
                RightSide.Visible = CornerBoxes
                BottomSide.Visible = CornerBoxes
                BottomDown.Visible = CornerBoxes
                BottomRightSide.Visible = CornerBoxes
                BottomRightDown.Visible = CornerBoxes
                NameTag.Visible = Names
                WeaponText.Visible = WeaponType
                BarBackRound.Visible = Bar
                Bar.Visible = Bar
            else
                LeftTop.Visible = false
                LeftSide.Visible = false
                BottomSide.Visible = false
                BottomDown.Visible = false
                RightTop.Visible = false
                RightSide.Visible = false
                BottomRightSide.Visible = false
                BottomRightDown.Visible = false
                NameTag.Visible = false
                WeaponText.Visible = false
                BarBackRound.Visible = false
                Bar.Visible = false
            end
        else
            LeftTop.Visible = false
            LeftSide.Visible = false
            RightTop.Visible = false
            RightSide.Visible = false
            BottomSide.Visible = false
            BottomDown.Visible = false
            BottomRightSide.Visible = false
            BottomRightDown.Visible = false
            NameTag.Visible = false
            WeaponText.Visible = false
            BarBackRound.Visible = false
            Bar.Visible = false
        end

        if not model then
            LeftTop:Destroy()
            LeftSide:Destroy()
            RightTop:Destroy()
            RightSide:Destroy()
            BottomSide:Destroy()
            BottomDown:Destroy()
            BottomRightSide:Destroy()
            BottomRightDown:Destroy()
            NameTag:Destroy()
            WeaponText:Destroy()
            BarBackRound:Destroy()
            Bar:Destroy()
            if Connection then
                Connection:Disconnect()
            end
        end
    end)
end

local barValueIncrementTime = 5
local resetBarValueTime = 1
local lastIncrementTime = 0
local lastResetTime = 0

local function IncrementBarValue()
    if BarValue < 100 then
        BarValue = math.min(BarValue + 1, 100)
    end
end

local function ResetLowBarValue()
    if BarValue <= 1 then
        BarValue = 100
    end
end

local function onLogMessage(message)
    local HealthAfr = message:match("->(%d+%.?%d*)hp")
    if HealthAfr then
        BarValue = math.floor(tonumber(HealthAfr))
    end
end

BeamVar.LogService.MessageOut:Connect(onLogMessage)

game:GetService("RunService").Heartbeat:Connect(function()
    local currentTime = tick()
    if currentTime - lastIncrementTime >= barValueIncrementTime then
        IncrementBarValue()
        lastIncrementTime = currentTime
    end
    if currentTime - lastResetTime >= resetBarValueTime then
        ResetLowBarValue()
        lastResetTime = currentTime
    end
end)

local Cache = {}
for i,v in pairs(PlayerList) do
    if v.model:FindFirstChild("HumanoidRootPart") and not table.find(Cache, v) then
        table.insert(Cache, v)
        ESP(v)
    end
end

game:GetService("Workspace").ChildAdded:Connect(function()
    task.delay(1.5, function()
        for i,v in pairs(PlayerList) do
            if v.model:FindFirstChild("HumanoidRootPart") and not table.find(Cache, v) then
                table.insert(Cache, v)
                ESP(v)
            end
        end
    end)
end)
end)
-- Ambient
local Lighting = game:GetService("Lighting")
--
local DesiredColor = Color3.fromRGB(255, 255, 255)
local ambientenabled = false
local color = ambientenabled and DesiredColor or Lighting.Ambient
if ambientenabled then 
    color = DesiredColor
end
--
local ambientFunc = {
    TimeOfDay = Lighting.TimeOfDay,
    Ambient = Lighting.Ambient,
    GlobalShadows = Lighting.GlobalShadows,
    ColorShift_Top = Lighting.ColorShift_Top,
    ColorShift_Bottom = Lighting.ColorShift_Bottom,
    FogEnd = Lighting.FogEnd,
    FogStart = Lighting.FogStart,
    FogColor = Lighting.FogColor,
}
--
local SpoofedAmbient2; SpoofedAmbient2 = hookmetamethod(game, "__index", newcclosure(function(self, string)
    if checkcaller() then 
        return SpoofedAmbient2(self, string)
    end
    if self == Lighting and ambientFunc[string] then
        return ambientFunc[string]
    end
    return SpoofedAmbient2(self, string)
end))
--
local SpoofedAmbient1; SpoofedAmbient1 = hookmetamethod(game, "__newindex", newcclosure(function(self, string, value)
    if checkcaller() then 
        return SpoofedAmbient1(self, string, value)
    end
    if self == Lighting then
        ambientFunc[string] = value
        if string == "Ambient" then
            color = ambientenabled and DesiredColor or value
            return SpoofedAmbient1(self, string, color)
        end
    end
    return SpoofedAmbient1(self, string, value)
end))
--
tab.newToggle("Ambient", "Toggle ambient color!", true, function(toggleState)
    if toggleState then
        ambientenabled = true
        print("On")
    else
        ambientenabled = false
        print("Off")
    end
end)
local camera = game.Workspace.CurrentCamera
local default_fov = 70
local zoom = 120
local FovEnabled = false
local currentFov = camera.FieldOfView
local fovFunc = {
    FieldOfView = camera.FieldOfView
}
--
local SpoofedFov2
SpoofedFov2 = hookmetamethod(game, "__index", newcclosure(function(self, key)
    if checkcaller() then
        return SpoofedFov2(self, key)
    end
    if self == camera and fovFunc[key] then
        return fovFunc[key]
    end
    return SpoofedFov2(self, key)
end))
--
local SpoofedFov1
SpoofedFov1 = hookmetamethod(game, "__newindex", newcclosure(function(self, key, value)
    if checkcaller() then
        return SpoofedFov1(self, key, value)
    end
    if self == camera then
        fovFunc[key] = value
        if key == "FieldOfView" then
            if FovEnabled then
                return SpoofedFov1(self, key, default_fov)
            else
                return SpoofedFov1(self, key, currentFov)
            end
        end
    end
    return SpoofedFov1(self, key, value)
end))
--
tab.newToggle("FOV Spoof", "Toggle FOV Spoofing", false, function(toggleState)
    FovEnabled = toggleState
    if toggleState then
        currentFov = camera.FieldOfView
        camera.FieldOfView = default_fov
    else
        camera.FieldOfView = currentFov
    end
end)
--
tab.newSlider("Zoom Level", "Adjust FOV Zoom", 120, false, function(num)
    fovFunc.FieldOfView = num
    if not FovEnabled then
        currentFov = num
        camera.FieldOfView = num
    end
end)
local CurrentSliderValue = 0.5 
--
tab.newSlider("xray transparency", "", 100, false, function(num)
    CurrentSliderValue = num / 100
end)
--
tab.newToggle("Xray toggle", "", false, function(toggleState)
    if toggleState then
        for i, v in pairs(game:GetService("Workspace"):GetChildren()) do
            if v:FindFirstChild("Hitbox") then
                v.Hitbox.Transparency = CurrentSliderValue
            end
        end
    else
        for i, v in pairs(game:GetService("Workspace"):GetChildren()) do
            if v:FindFirstChild("Hitbox") then
                v.Hitbox.Transparency = 0
            end
        end
    end
end)
    local tab = DrRayLibrary.newTab("extra", "ImageIdHere")
local ScreenGui = Instance.new("ScreenGui")
local AutoRunButton = Instance.new("TextButton")
local Frame = Instance.new("Frame")

ScreenGui.Parent = game:GetService("CoreGui")
ScreenGui.Name = "AutoRunGui"

Frame.Size = UDim2.new(0, 100, 0, 80)
Frame.Position = UDim2.new(0, 10, 1, -150)
Frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
Frame.Active = true
Frame.Draggable = true
Frame.Parent = ScreenGui

AutoRunButton.Size = UDim2.new(1, 0, 1, 0)
AutoRunButton.Text = "Auto slide jump run"
AutoRunButton.Parent = Frame
AutoRunButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
AutoRunButton.TextColor3 = Color3.fromRGB(255, 255, 255)
AutoRunButton.BorderSizePixel = 0

Frame.Visible = false

tab.newToggle("Slide Jump Toggle", "Toggle slide jump UI", true, function(toggleState)
    Frame.Visible = toggleState
end)

local isAutoRunning = false
local stopAutoRun = false

local function AutoRunAndJumpCrouch()
    while isAutoRunning do
        if stopAutoRun then break end
        keypress(0x57)
        keypress(0x10)
        task.wait(0.05)
        keypress(0x43)
        keypress(0x20)
        keyrelease(0x20)
        task.wait(0.5)
        keyrelease(0x43)
        keyrelease(0x10)
        wait(1.2)
    end
end

AutoRunButton.MouseButton1Click:Connect(function()
    if not isAutoRunning then
        isAutoRunning = true
        stopAutoRun = false
        AutoRunButton.Text = "Stop slide jump run"
        task.spawn(AutoRunAndJumpCrouch)
    else
        isAutoRunning = false
        stopAutoRun = true
        keyrelease(0x57)
        keyrelease(0x10)
        keyrelease(0x43)
        AutoRunButton.Text = "Auto slide jump run"
    end
end)

local function createDraggableButton(name, position, callback)
    local gui = Instance.new("ScreenGui")
    local button = Instance.new("TextButton")
    local dragging, dragInput, dragStart, startPos

    gui.Parent = game.CoreGui
    gui.Name = name .. "Gui"
    gui.ResetOnSpawn = false

    button.Parent = gui
    button.Size = UDim2.new(0, 100, 0, 30)
    button.Position = position
    button.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    button.TextColor3 = Color3.new(1, 1, 1)
    button.Text = name
    button.Visible = false

    button.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = button.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    button.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            button.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)

    button.MouseButton1Click:Connect(callback)

    return button
end


local lootButton = createDraggableButton("Loot All", UDim2.new(0, 100, 1, -100), function()
    for i = 1, 20 do
        game:GetService("Players").LocalPlayer.RemoteEvent:FireServer(12, i, true)
        wait(0.03)
    end
end)

tab.newToggle("Loot All Toggle", "Show/hide Loot All button", false, function(toggleState)
    lootButton.Visible = toggleState
end)

local depositButton = createDraggableButton("Deposit All", UDim2.new(0, 210, 1, -100), function()
    for i = 1, 20 do
        game:GetService("Players").LocalPlayer.RemoteEvent:FireServer(12, i, false)
        wait(0.03)
    end
end)

tab.newToggle("Deposit All Toggle", "Show/hide Deposit All button", false, function(toggleState)
    depositButton.Visible = toggleState
end)

local SkinChoice, SkinsEnabled = "Blackout", false

local SkinTextures = {
    Lightning = "rbxassetid://6555500992",
    Galaxy = "rbxassetid://9305457875",
    Swirl = "rbxassetid://13199296652",
    Wavey = "rbxassetid://13898657945",
    RedGalaxy = "rbxassetid://1619172543",
    Marble = "rbxassetid://8904067198",
    Lava = "rbxassetid://7077560268",
    Blackout = "rbxassetid://5847588525",
    Snake = "rbxassetid://7457460026",
    Banana = "rbxassetid://338693178",
    Death = "rbxassetid://11896030190",
    Doggo = "rbxassetid://72018952255995",
    Ocean = "rbxassetid://77526596429738",
}

function GetEquippedGunName()
    local equippedItem = modules.FPS.GetEquippedItem()
    if equippedItem then
        return equippedItem.id
    end
    return nil
end

local function SkinChanger(SkinName)
    local GunName = GetEquippedGunName()
    if not GunName or not ReplicatedStorage.ItemSkins:FindFirstChild(GunName) then return end

    local SkinFolder = ReplicatedStorage.ItemSkins[GunName]
    local AnimationModule = SkinFolder:FindFirstChild("AnimatedSkinPrefab") and require(SkinFolder.AnimatedSkinPrefab)
    local TextureId = SkinTextures[SkinName]

    if AnimationModule and TextureId then
        local Speed = (SkinName == "Banana") and 2 or 1
        local Scale = (SkinName == "Marble") and 0.01 or 0.3
        local clonedApplyToModel = clonefunction(AnimationModule.ApplyToModel)
        clonedApplyToModel(Workspace.Ignore.FPSArms.HandModel, TextureId, Speed, Scale)
    end
end

local function OnChildAdded()
    if SkinsEnabled then
        local HandModel = Workspace.Ignore.FPSArms:WaitForChild("HandModel", 3)
        if HandModel then
            SkinChanger(SkinChoice)
        end
    end
end

Workspace.Ignore.FPSArms.ChildAdded:Connect(clonefunction(OnChildAdded))

local skinOptions = {}
for skinName in pairs(SkinTextures) do
    table.insert(skinOptions, skinName)
end

tab.newToggle("Skin Toggle", "Enable/Disable custom skin", false, function(toggleState)
    SkinsEnabled = toggleState
    if toggleState then
        OnChildAdded()
    end
end)

tab.newDropdown("Select Skin", "Choose a weapon skin", skinOptions, function(selectedSkin)
    SkinChoice = selectedSkin
    if SkinsEnabled then
        OnChildAdded()
    end
end)
local tab = DrRayLibrary.newTab("extra 2", "ImageIdHere")
tab.newButton("Change arms", "changes your arms to see through and pink", function()
local function setArmProperties(property, value)
    local armParts = {"LeftUpperArm", "LeftLowerArm", "LeftHand", "RightUpperArm", "RightLowerArm", "RightHand"}
    for _, partName in ipairs(armParts) do
        game:GetService("Workspace").Ignore.FPSArms[partName][property] = value
    end
end

setArmProperties("Color", Color3.fromRGB(255, 105, 180))
setArmProperties("Material", Enum.Material.ForceField)
setArmProperties("TextureID", "rbxassetid://9305457875")

local function changeArmsToForceField(player)
    local fpsArms = workspace:FindFirstChild("Ignore")
    if not fpsArms then
        return
    end

    local fakeArms = fpsArms:FindFirstChild("FPSArms"):FindFirstChild("Fake")
    if not fakeArms then
        return
    end

    for _, partName in ipairs({"c_LeftLowerArm", "c_RightLowerArm"}) do
        local armPart = fakeArms:FindFirstChild(partName)
        if armPart and armPart:IsA("BasePart") then
            armPart.Material = Enum.Material.ForceField
            armPart.Color = Color3.fromRGB(255, 105, 180)
        end
    end
end

local player = game.Players.LocalPlayer
changeArmsToForceField(player)
end)
local position = "down"
local hopping = false
--
_G.speedy = false
_G.speed = 10
_G.speedy_k = true
local speedhack = false
-- 
tab.newToggle("Slide Speed", "Toggle slide speed", false, function(toggleState)
    speedhack = toggleState
end)
--
tab.newSlider("Speed", "Set slide speed", 12, false, function(value)
    _G.speed = value
end)
--
game:GetService("UserInputService").InputBegan:Connect(function(input, g)
    if input.KeyCode == Enum.KeyCode.U and not g then
        _G.h_press = not _G.h_press
        _G.speedy_k = not _G.h_press
    end
end)
--
game:GetService("UserInputService").InputBegan:Connect(function(input, g)
    if input.KeyCode == Enum.KeyCode.C and _G.speedy_k and not g then
        _G.speedy = true
    end
end)
--
game:GetService("UserInputService").InputEnded:Connect(function(input, g)
    if input.KeyCode == Enum.KeyCode.C and not g then
        _G.speedy = false
    end
end)
--
game:GetService("RunService").RenderStepped:Connect(function()
    if _G.speedy and speedhack then
        for _, v in pairs(game.Workspace.Ignore.LocalCharacter:GetChildren()) do
            v.Velocity = v.Velocity + workspace.Camera.CFrame.LookVector * _G.speed
        end
    end
end)
--
game:GetService("RunService").RenderStepped:Connect(function()
    local character = workspace.Ignore.LocalCharacter
    local middle = character.Middle
    local ray_origin = middle.Position
    local ray_direction = character.Bottom.CFrame.LookVector.Unit * 3 + Vector3.new(0, -2, 0)
    local raycast_params = RaycastParams.new()
    raycast_params.FilterType = Enum.RaycastFilterType.Blacklist
    raycast_params.FilterDescendantsInstances = {character}
    local ray_result = workspace:Raycast(ray_origin, ray_direction, raycast_params)
    if not ray_result and speedhack then
        if middle.LinearVelocity.MaxAxesForce == Vector3.new(0, 0, 0) and middle.Velocity.Y <= 0.2 then
            if not hopping then
                hopping = true
                speedy_k = true
                position = "up"
                task.wait(0.15)
                position = "down"
                speedy_k = false
                task.wait(0.09)
                hopping = false
            end
        end
    end
end)
--
local check = {}
game:GetService("RunService").Heartbeat:Connect(function()
    if speedy_k == true and speedhack then
        local character = game.Workspace.Ignore.LocalCharacter
        local middle = character.Middle
        check[1] = middle.CFrame
        local spoof_this = middle.CFrame

        if position == "up" then
            spoof_this = spoof_this + Vector3.new(0, 5, 0)
        end

        middle.CFrame = spoof_this
        game:GetService("RunService").RenderStepped:Wait()
        middle.CFrame = check[1]
    end
end)
local VIM = game:GetService("VirtualInputManager")
local CoreGui = game:GetService("CoreGui")

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "AutoKeyGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = CoreGui

local button = Instance.new("TextButton")
button.Name = "ToggleButton"
button.Size = UDim2.new(0, 160, 0, 50)
button.Position = UDim2.new(0, 20, 0, 20)
button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
button.TextColor3 = Color3.fromRGB(255, 255, 255)
button.Font = Enum.Font.SourceSansBold
button.TextSize = 20
button.Text = "Hold W + C"
button.Visible = false
button.Parent = screenGui

local autoHold = false

button.MouseButton1Click:Connect(function()
    autoHold = not autoHold
    if autoHold then
        button.Text = "Release W + C"
        button.BackgroundColor3 = Color3.fromRGB(50, 150, 50)
        VIM:SendKeyEvent(true, Enum.KeyCode.W, false, game)
        VIM:SendKeyEvent(true, Enum.KeyCode.C, false, game)
    else
        button.Text = "Hold W + C"
        button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        VIM:SendKeyEvent(false, Enum.KeyCode.W, false, game)
        VIM:SendKeyEvent(false, Enum.KeyCode.C, false, game)
    end
end)

tab.newToggle("Auto Hold Button", "Toggle GUI for holding W + C", false, function(toggleState)
    button.Visible = toggleState
end)
local antiaim = {
    invisible = false,
}

local mt = getrawmetatable(game)
local oldindex = mt.__index
setreadonly(mt, false)

mt.__index = newcclosure(function(self, key)
    if tostring(self) == "RemoteEvent" and key == "FireServer" and antiaim.invisible then
        return function(_, ...)
            local args = {...}
            if args[1] == 1 then
                args[4] = 1/0
            end
            return oldindex(self, key)(self, unpack(args))
        end
    end
    return oldindex(self, key)
end)

setreadonly(mt, true)

tab.newToggle("Invisible", "Toggle invisibility", false, function(toggleState)
    antiaim.invisible = toggleState
end)

-- print the name
for _, line in ipairs({
  "█████████████",
  "█▄─▄▄─█░▄▄░▄█",
  "██─▄█▀██▀▄█▀█",
  "▀▄▄▄▄▄▀▄▄▄▄▄▀",
  "█████████████████████████████████████████████████",
  "█▄─▄─▀██▀▄─██▄─▀█▄─▄█─▄▄▄▄█████▄─▄▄─█▄─▀─▄█▄─▄▄─█",
  "██─▄─▀██─▀─███─█▄▀─██▄▄▄▄─█░░███─▄█▀██▀─▀███─▄█▀█",
  "▀▄▄▄▄▀▀▄▄▀▄▄▀▄▄▄▀▀▄▄▀▄▄▄▄▄▀▄▄▀▀▄▄▄▄▄▀▄▄█▄▄▀▄▄▄▄▄▀"
}) do
    warn(line)
end
local TextLabel = Drawing.new("Text")
TextLabel.Text = "Ezbans.exe - V2 Paid "
TextLabel.Size = 24
TextLabel.Center = true
TextLabel.Outline = true
TextLabel.Visible = true

local viewportSize = game:GetService("Workspace").CurrentCamera.ViewportSize
TextLabel.Position = Vector2.new(viewportSize.X / 2, 15)

local RunService = game:GetService("RunService")
local hue = 0

RunService.RenderStepped:Connect(function()
    hue = (hue + 0.01) % 1
    local color = Color3.fromHSV(hue, 1, 1)
    TextLabel.Color = color
    
    local newViewportSize = game:GetService("Workspace").CurrentCamera.ViewportSize
    TextLabel.Position = Vector2.new(newViewportSize.X / 2, 15)
end)
