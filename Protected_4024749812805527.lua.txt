local modules = {}
for _, v in ipairs(getgc(true)) do
    if typeof(v) == "function" and islclosure(v) then
        local src = debug.info(v, "s")
        local name = debug.info(v, "n")
        if src:find(".BowSpecial") and name == "update" then
            modules.Character = debug.getupvalue(v, 13)
            modules.Camera = debug.getupvalue(v, 15)
            modules.Network = debug.getupvalue(v, 19)
        elseif src:find(".Character") and name == "getGroundCastResult" then
            modules.FPS = debug.getupvalue(v, 2)
            modules.FPS2 = debug.getupvalue(v, 3)
        elseif src:find(".Character") and name == "updateCharacter" then
            modules.Player  = debug.getupvalue(v, 4)
            modules.Player2 = debug.getupvalue(v, 6)
            modules.Player3 = debug.getupvalue(v, 14)
            modules.Player4 = debug.getupvalue(v, 15)
            modules.Player5 = debug.getupvalue(v, 21)
            modules.Player6 = debug.getupvalue(v, 28)
            modules.Player7 = debug.getupvalue(v, 32)
        end
    end
end
--
local OsClock = os.clock()
local drawing = getgenv().Drawing
local workspace,camera = cloneref(game:GetService("Workspace")),workspace.CurrentCamera
local UIS, RS, ReplicatedStorage = cloneref(game:GetService("UserInputService")), cloneref(game:GetService("RunService")), cloneref(game:GetService("ReplicatedStorage"))


local DrRayLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/AZYsGithub/DrRay-UI-Library/main/DrRay.lua"))()
local window = DrRayLibrary:Load("Ez bans.exe", "Default")
--
local tab = DrRayLibrary.newTab("Combat", "ImageIdHere")
-- Silent aim
tab.newButton("silent aim", "", function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/milo22-ux/Ak.lol/refs/heads/main/Loadstring%20obfuscated",true))()
end)
-- hitboxs
tab.newButton("Hitbox", "will auto make it 10", function()
local old = Vector3.new(1.672248125076294, 0.835624098777771, 0.835624098777771)
local playermodel = getupvalues(getrenv()._G.modules.Player.GetPlayerModel)[1]
local hitbox = true
local sleepcheck = true
--
game:GetService("RunService").RenderStepped:Connect(function()
    for i, v in pairs(playermodel) do
        if hitbox and (not sleepcheck or not v.sleeping) then
            v.model.Head.Size = Vector3.new(9, 9, 9)
            v.model.Head.Transparency = 0.5
            v.model.Head.CanCollide = false
        else
            v.model.Head.Size = old
            v.model.Head.Transparency = 0
            v.model.Head.CanCollide = true
        end
    end
end)
end)
--
local tab = DrRayLibrary.newTab("Visuals", "ImageIdHere")
-- Esp
tab.newButton("Esp", "", function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/milo22-ux/Trident-survival-stuff/refs/heads/main/Esp",true))()
end)
-- chams
tab.newButton("Esp", "chams", function()
local function createHighlight(object)
    if not object:FindFirstChild("Highlight") then
        local highlight = Instance.new("Highlight")
        highlight.Parent = object
        highlight.FillColor = Color3.fromRGB(255, 0, 0)
        highlight.FillTransparency = 0.5
        highlight.OutlineColor = Color3.fromRGB(0, 0, 0)
        highlight.OutlineTransparency = 0.5
    end
end
--
for _, object in pairs(workspace:GetChildren()) do
    if object:FindFirstChild("Head") then
        createHighlight(object)
    end
end
--
workspace.ChildAdded:Connect(function(child)
    if child:FindFirstChild("Head") then
        createHighlight(child)
    end
end)
end)
-- no spread
local Nospread = false
local oldAccuracy = nil

local No_Spread
No_Spread = hookmetamethod(Random.new(), "__namecall",(function(self, ...)
    local args = { ... }
    if args[1] == -100 and args[2] == 100 and Nospread then
        return No_Spread(self, -1, 1)
    end
    return No_Spread(self, ...)
end))

tab.newToggle("No Spread", "", false, function(toggleState)
    Nospread = toggleState
end)
-- Ambient
local Lighting = game:GetService("Lighting")
--
local DesiredColor = Color3.fromRGB(255, 255, 255)
local ambientenabled = false
local color = ambientenabled and DesiredColor or Lighting.Ambient
if ambientenabled then 
    color = DesiredColor
end
--
local ambientFunc = {
    TimeOfDay = Lighting.TimeOfDay,
    Ambient = Lighting.Ambient,
    GlobalShadows = Lighting.GlobalShadows,
    ColorShift_Top = Lighting.ColorShift_Top,
    ColorShift_Bottom = Lighting.ColorShift_Bottom,
    FogEnd = Lighting.FogEnd,
    FogStart = Lighting.FogStart,
    FogColor = Lighting.FogColor,
}
--
local SpoofedAmbient2; SpoofedAmbient2 = hookmetamethod(game, "__index", newcclosure(function(self, string)
    if checkcaller() then 
        return SpoofedAmbient2(self, string)
    end
    if self == Lighting and ambientFunc[string] then
        return ambientFunc[string]
    end
    return SpoofedAmbient2(self, string)
end))
--
local SpoofedAmbient1; SpoofedAmbient1 = hookmetamethod(game, "__newindex", newcclosure(function(self, string, value)
    if checkcaller() then 
        return SpoofedAmbient1(self, string, value)
    end
    if self == Lighting then
        ambientFunc[string] = value
        if string == "Ambient" then
            color = ambientenabled and DesiredColor or value
            return SpoofedAmbient1(self, string, color)
        end
    end
    return SpoofedAmbient1(self, string, value)
end))
--
tab.newToggle("Ambient", "Toggle ambient color!", true, function(toggleState)
    if toggleState then
        ambientenabled = true
        print("On")
    else
        ambientenabled = false
        print("Off")
    end
end)
local camera = game.Workspace.CurrentCamera
local default_fov = 70
local zoom = 120
local FovEnabled = false
local currentFov = camera.FieldOfView
local fovFunc = {
    FieldOfView = camera.FieldOfView
}
--
local SpoofedFov2
SpoofedFov2 = hookmetamethod(game, "__index", newcclosure(function(self, key)
    if checkcaller() then
        return SpoofedFov2(self, key)
    end
    if self == camera and fovFunc[key] then
        return fovFunc[key]
    end
    return SpoofedFov2(self, key)
end))
--
local SpoofedFov1
SpoofedFov1 = hookmetamethod(game, "__newindex", newcclosure(function(self, key, value)
    if checkcaller() then
        return SpoofedFov1(self, key, value)
    end
    if self == camera then
        fovFunc[key] = value
        if key == "FieldOfView" then
            if FovEnabled then
                return SpoofedFov1(self, key, default_fov)
            else
                return SpoofedFov1(self, key, currentFov)
            end
        end
    end
    return SpoofedFov1(self, key, value)
end))
--
tab.newToggle("FOV Spoof", "Toggle FOV Spoofing", false, function(toggleState)
    FovEnabled = toggleState
    if toggleState then
        currentFov = camera.FieldOfView
        camera.FieldOfView = default_fov
    else
        camera.FieldOfView = currentFov
    end
end)
--
tab.newSlider("Zoom Level", "Adjust FOV Zoom", 120, false, function(num)
    fovFunc.FieldOfView = num
    if not FovEnabled then
        currentFov = num
        camera.FieldOfView = num
    end
end)
local CurrentSliderValue = 0.5 
--
tab.newSlider("xray transparency", "", 100, false, function(num)
    CurrentSliderValue = num / 100
end)
--
tab.newToggle("Xray toggle", "", false, function(toggleState)
    if toggleState then
        for i, v in pairs(game:GetService("Workspace"):GetChildren()) do
            if v:FindFirstChild("Hitbox") then
                v.Hitbox.Transparency = CurrentSliderValue
            end
        end
    else
        for i, v in pairs(game:GetService("Workspace"):GetChildren()) do
            if v:FindFirstChild("Hitbox") then
                v.Hitbox.Transparency = 0
            end
        end
    end
end)
local tab = DrRayLibrary.newTab("extra", "ImageIdHere")
local ScreenGui = Instance.new("ScreenGui")
local AutoRunButton = Instance.new("TextButton")
local Frame = Instance.new("Frame")

ScreenGui.Parent = game:GetService("CoreGui")
ScreenGui.Name = "AutoRunGui"

Frame.Size = UDim2.new(0, 100, 0, 80)
Frame.Position = UDim2.new(0, 10, 1, -150)
Frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
Frame.Active = true
Frame.Draggable = true
Frame.Parent = ScreenGui

AutoRunButton.Size = UDim2.new(1, 0, 1, 0)
AutoRunButton.Text = "Auto slide jump run"
AutoRunButton.Parent = Frame
AutoRunButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
AutoRunButton.TextColor3 = Color3.fromRGB(255, 255, 255)
AutoRunButton.BorderSizePixel = 0

Frame.Visible = false

tab.newToggle("Slide Jump Toggle", "Toggle slide jump UI", true, function(toggleState)
    Frame.Visible = toggleState
end)

local isAutoRunning = false
local stopAutoRun = false

local function AutoRunAndJumpCrouch()
    while isAutoRunning do
        if stopAutoRun then break end
        keypress(0x57)
        keypress(0x10)
        task.wait(0.05)
        keypress(0x43)
        keypress(0x20)
        keyrelease(0x20)
        task.wait(0.5)
        keyrelease(0x43)
        keyrelease(0x10)
        wait(1.2)
    end
end

AutoRunButton.MouseButton1Click:Connect(function()
    if not isAutoRunning then
        isAutoRunning = true
        stopAutoRun = false
        AutoRunButton.Text = "Stop slide jump run"
        task.spawn(AutoRunAndJumpCrouch)
    else
        isAutoRunning = false
        stopAutoRun = true
        keyrelease(0x57)
        keyrelease(0x10)
        keyrelease(0x43)
        AutoRunButton.Text = "Auto slide jump run"
    end
end)

local function createDraggableButton(name, position, callback)
    local gui = Instance.new("ScreenGui")
    local button = Instance.new("TextButton")
    local dragging, dragInput, dragStart, startPos

    gui.Parent = game.CoreGui
    gui.Name = name .. "Gui"
    gui.ResetOnSpawn = false

    button.Parent = gui
    button.Size = UDim2.new(0, 100, 0, 30)
    button.Position = position
    button.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    button.TextColor3 = Color3.new(1, 1, 1)
    button.Text = name
    button.Visible = false

    button.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = button.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    button.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            button.Position = UDim2.new(
                startPos.X.Scale, startPos.X.Offset + delta.X,
                startPos.Y.Scale, startPos.Y.Offset + delta.Y
            )
        end
    end)

    button.MouseButton1Click:Connect(callback)

    return button
end

local lootButton = createDraggableButton("Loot All", UDim2.new(0, 100, 1, -100), function()
    for i = 1, 20 do
        game:GetService("Players").LocalPlayer.RemoteEvent:FireServer(12, i, true)
        wait(0.03)
    end
end)

tab.newToggle("Loot All Toggle", "Show/hide Loot All button", false, function(toggleState)
    lootButton.Visible = toggleState
end)

local depositButton = createDraggableButton("Deposit All", UDim2.new(0, 210, 1, -100), function()
    for i = 1, 20 do
        game:GetService("Players").LocalPlayer.RemoteEvent:FireServer(12, i, false)
        wait(0.03)
    end
end)

tab.newToggle("Deposit All Toggle", "Show/hide Deposit All button", false, function(toggleState)
    depositButton.Visible = toggleState
end)

local SkinChoice, SkinsEnabled = "Blackout", false

local SkinTextures = {
    Lightning = "rbxassetid://6555500992",
    Galaxy = "rbxassetid://9305457875",
    Swirl = "rbxassetid://13199296652",
    Wavey = "rbxassetid://13898657945",
    RedGalaxy = "rbxassetid://1619172543",
    Marble = "rbxassetid://8904067198",
    Lava = "rbxassetid://7077560268",
    Blackout = "rbxassetid://5847588525",
    Snake = "rbxassetid://7457460026",
    Banana = "rbxassetid://338693178",
    Death = "rbxassetid://11896030190",
    Doggo = "rbxassetid://72018952255995",
    Ocean = "rbxassetid://77526596429738",
}

function GetEquippedGunName()
    local equippedItem = modules.FPS.GetEquippedItem()
    if equippedItem then
        return equippedItem.id
    end
    return nil
end

local function SkinChanger(SkinName)
    local GunName = GetEquippedGunName()
    if not GunName or not ReplicatedStorage.ItemSkins:FindFirstChild(GunName) then return end

    local SkinFolder = ReplicatedStorage.ItemSkins[GunName]
    local AnimationModule = SkinFolder:FindFirstChild("AnimatedSkinPrefab") and require(SkinFolder.AnimatedSkinPrefab)
    local TextureId = SkinTextures[SkinName]

    if AnimationModule and TextureId then
        local Speed = (SkinName == "Banana") and 2 or 1
        local Scale = (SkinName == "Marble") and 0.01 or 0.3
        local clonedApplyToModel = clonefunction(AnimationModule.ApplyToModel)
        clonedApplyToModel(Workspace.Ignore.FPSArms.HandModel, TextureId, Speed, Scale)
    end
end

local function OnChildAdded()
    if SkinsEnabled then
        local HandModel = Workspace.Ignore.FPSArms:WaitForChild("HandModel", 3)
        if HandModel then
            SkinChanger(SkinChoice)
        end
    end
end

Workspace.Ignore.FPSArms.ChildAdded:Connect(clonefunction(OnChildAdded))

local skinOptions = {}
for skinName in pairs(SkinTextures) do
    table.insert(skinOptions, skinName)
end

tab.newToggle("Skin Toggle", "Enable/Disable custom skin", false, function(toggleState)
    SkinsEnabled = toggleState
    if toggleState then
        OnChildAdded()
    end
end)

tab.newDropdown("Select Skin", "Choose a weapon skin", skinOptions, function(selectedSkin)
    SkinChoice = selectedSkin
    if SkinsEnabled then
        OnChildAdded()
    end
end)
local tab = DrRayLibrary.newTab("extra 2", "ImageIdHere")
tab.newButton("Change arms", "changes your arms to see through and pink", function()
local function setArmProperties(property, value)
    local armParts = {"LeftUpperArm", "LeftLowerArm", "LeftHand", "RightUpperArm", "RightLowerArm", "RightHand"}
    for _, partName in ipairs(armParts) do
        game:GetService("Workspace").Ignore.FPSArms[partName][property] = value
    end
end

setArmProperties("Color", Color3.fromRGB(255, 105, 180))
setArmProperties("Material", Enum.Material.ForceField)
setArmProperties("TextureID", "rbxassetid://9305457875")

local function changeArmsToForceField(player)
    local fpsArms = workspace:FindFirstChild("Ignore")
    if not fpsArms then
        return
    end

    local fakeArms = fpsArms:FindFirstChild("FPSArms"):FindFirstChild("Fake")
    if not fakeArms then
        return
    end

    for _, partName in ipairs({"c_LeftLowerArm", "c_RightLowerArm"}) do
        local armPart = fakeArms:FindFirstChild(partName)
        if armPart and armPart:IsA("BasePart") then
            armPart.Material = Enum.Material.ForceField
            armPart.Color = Color3.fromRGB(255, 105, 180)
        end
    end
end

local player = game.Players.LocalPlayer
changeArmsToForceField(player)
end)
local position = "down"
local hopping = false
--
_G.speedy = false
_G.speed = 10
_G.speedy_k = true
local speedhack = false
-- 
tab.newToggle("Slide Speed", "Toggle slide speed", false, function(toggleState)
    speedhack = toggleState
end)
--
tab.newSlider("Speed", "Set slide speed", 12, false, function(value)
    _G.speed = value
end)
--
game:GetService("UserInputService").InputBegan:Connect(function(input, g)
    if input.KeyCode == Enum.KeyCode.U and not g then
        _G.h_press = not _G.h_press
        _G.speedy_k = not _G.h_press
    end
end)
--
game:GetService("UserInputService").InputBegan:Connect(function(input, g)
    if input.KeyCode == Enum.KeyCode.C and _G.speedy_k and not g then
        _G.speedy = true
    end
end)
--
game:GetService("UserInputService").InputEnded:Connect(function(input, g)
    if input.KeyCode == Enum.KeyCode.C and not g then
        _G.speedy = false
    end
end)
--
game:GetService("RunService").RenderStepped:Connect(function()
    if _G.speedy and speedhack then
        for _, v in pairs(game.Workspace.Ignore.LocalCharacter:GetChildren()) do
            v.Velocity = v.Velocity + workspace.Camera.CFrame.LookVector * _G.speed
        end
    end
end)
--
game:GetService("RunService").RenderStepped:Connect(function()
    local character = workspace.Ignore.LocalCharacter
    local middle = character.Middle
    local ray_origin = middle.Position
    local ray_direction = character.Bottom.CFrame.LookVector.Unit * 3 + Vector3.new(0, -2, 0)
    local raycast_params = RaycastParams.new()
    raycast_params.FilterType = Enum.RaycastFilterType.Blacklist
    raycast_params.FilterDescendantsInstances = {character}
    local ray_result = workspace:Raycast(ray_origin, ray_direction, raycast_params)
    if not ray_result and speedhack then
        if middle.LinearVelocity.MaxAxesForce == Vector3.new(0, 0, 0) and middle.Velocity.Y <= 0.2 then
            if not hopping then
                hopping = true
                speedy_k = true
                position = "up"
                task.wait(0.15)
                position = "down"
                speedy_k = false
                task.wait(0.09)
                hopping = false
            end
        end
    end
end)
--
local check = {}
game:GetService("RunService").Heartbeat:Connect(function()
    if speedy_k == true and speedhack then
        local character = game.Workspace.Ignore.LocalCharacter
        local middle = character.Middle
        check[1] = middle.CFrame
        local spoof_this = middle.CFrame

        if position == "up" then
            spoof_this = spoof_this + Vector3.new(0, 5, 0)
        end

        middle.CFrame = spoof_this
        game:GetService("RunService").RenderStepped:Wait()
        middle.CFrame = check[1]
    end
end)
local VIM = game:GetService("VirtualInputManager")
local CoreGui = game:GetService("CoreGui")

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "AutoKeyGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = CoreGui

local button = Instance.new("TextButton")
button.Name = "ToggleButton"
button.Size = UDim2.new(0, 160, 0, 50)
button.Position = UDim2.new(0, 20, 0, 20)
button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
button.TextColor3 = Color3.fromRGB(255, 255, 255)
button.Font = Enum.Font.SourceSansBold
button.TextSize = 20
button.Text = "Hold W + C"
button.Visible = false
button.Parent = screenGui

local autoHold = false

button.MouseButton1Click:Connect(function()
    autoHold = not autoHold
    if autoHold then
        button.Text = "Release W + C"
        button.BackgroundColor3 = Color3.fromRGB(50, 150, 50)
        VIM:SendKeyEvent(true, Enum.KeyCode.W, false, game)
        VIM:SendKeyEvent(true, Enum.KeyCode.C, false, game)
    else
        button.Text = "Hold W + C"
        button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        VIM:SendKeyEvent(false, Enum.KeyCode.W, false, game)
        VIM:SendKeyEvent(false, Enum.KeyCode.C, false, game)
    end
end)

tab.newToggle("Auto Hold Button", "Toggle GUI for holding W + C", false, function(toggleState)
    button.Visible = toggleState
end)
local antiaim = {
    invisible = false,
}

local mt = getrawmetatable(game)
local oldindex = mt.__index
setreadonly(mt, false)

mt.__index = newcclosure(function(self, key)
    if tostring(self) == "RemoteEvent" and key == "FireServer" and antiaim.invisible then
        return function(_, ...)
            local args = {...}
            if args[1] == 1 then
                args[4] = 1/0
            end
            return oldindex(self, key)(self, unpack(args))
        end
    end
    return oldindex(self, key)
end)

setreadonly(mt, true)

mt.__index = newcclosure(function(self, key)
    if tostring(self) == "RemoteEvent" and key == "FireServer" and antiaim.invisible then
        return function(_, ...)
            local args = {...}
            if args[1] == 1 then
                args[4] = 1/0
            end
            return oldindex(self, key)(self, unpack(args))
        end
    end
    return oldindex(self, key)
end)

setreadonly(mt, true)

tab.newToggle("Invisible", "Toggle invisibility", false, function(toggleState)
    antiaim.invisible = toggleState
end)
local tab = DrRayLibrary.newTab("Extra 3", "ImageIdHere")
-- Crosshair
tab.newButton("crosshair", "Nazi", function()
local RunService = game:GetService("RunService")
local camera = workspace.CurrentCamera
local center = camera.ViewportSize / 2
local angle = 0
local size = 15
local armLength = 15
local thickness = 2

local lines = {}
for i = 1, 8 do
    local line = Drawing.new("Line")
    line.Thickness = thickness
    line.Color = Color3.new(1, 1, 1)
    line.Visible = true
    lines[i] = line
end

local function rotate(x, y, a)
    local cos = math.cos(a)
    local sin = math.sin(a)
    return x * cos - y * sin, x * sin + y * cos
end

local function HSVToRGB(h, s, v)
    local c = v * s
    local x = c * (1 - math.abs((h * 6) % 2 - 1))
    local m = v - c

    local r, g, b = 0, 0, 0

    if 0 <= h and h < 1/6 then
        r, g, b = c, x, 0
    elseif 1/6 <= h and h < 2/6 then
        r, g, b = x, c, 0
    elseif 2/6 <= h and h < 3/6 then
        r, g, b = 0, c, x
    elseif 3/6 <= h and h < 4/6 then
        r, g, b = 0, x, c
    elseif 4/6 <= h and h < 5/6 then
        r, g, b = x, 0, c
    else
        r, g, b = c, 0, x
    end

    return Color3.new(r + m, g + m, b + m)
end

RunService.RenderStepped:Connect(function()
    angle += math.rad(3)
    local cx, cy = center.X, center.Y

    local baseLines = {
        { 0, -size, 0, size },
        { -size, 0, size, 0 },
    }

    local armLines = {
        { 0, -size, armLength, -size },
        { size, 0, size, armLength },
        { 0, size, -armLength, size },
        { -size, 0, -size, -armLength }
    }

    local hue = (tick() * 0.1) % 1
    local color = HSVToRGB(hue, 1, 1)

    for i = 1, 2 do
        local x1, y1 = rotate(baseLines[i][1], baseLines[i][2], angle)
        local x2, y2 = rotate(baseLines[i][3], baseLines[i][4], angle)
        lines[i].From = Vector2.new(cx + x1, cy + y1)
        lines[i].To = Vector2.new(cx + x2, cy + y2)
        lines[i].Color = color
    end

    for i = 1, 4 do
        local index = i + 2
        local x1, y1 = rotate(armLines[i][1], armLines[i][2], angle)
        local x2, y2 = rotate(armLines[i][3], armLines[i][4], angle)
        lines[index].From = Vector2.new(cx + x1, cy + y1)
        lines[index].To = Vector2.new(cx + x2, cy + y2)
        lines[index].Color = color
    end
end)
end)
-- print the name
loadstring(game:HttpGet("https://raw.githubusercontent.com/milo22-ux/Trident-survival-stuff/refs/heads/main/Print%20name",true))()
